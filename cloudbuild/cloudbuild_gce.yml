# 変数値の置換
substitutions:
  _IMAGE_NAME: api-sample-image         # docker image 名
  _INSTANCE_NAME: cloud-build-instance  # 作成する GCE インスタンス名
  _REGION: asia-northeast1-a            # GCE インスタンスを作成するリージョン

# name タグ : コマンドを実行するコンテナイメージ
# entrypoint タグ : name で指定したコンテナイメージのデフォルトのエントリーポイント（dockerコンテナなら docker コマンドなど）を使用しない場合に指定
steps:
  # キャッシュされたイメージを Container Registry から pull
  # 初めてイメージをビルドする際は docker pull で pull できる既存のイメージがないため、entrypoint を bash に設定し、コマンドの実行で返されるエラーを無視できるようにしている
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker pull gcr.io/${PROJECT_ID}/${_IMAGE_NAME}:${COMMIT_SHA} || exit 0']

  # Container Registry 上で docker image 作成
  - name: 'gcr.io/cloud-builders/docker'  # Docker を実行するコンテナイメージ
    id: docker build
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_NAME}:${COMMIT_SHA}', './api']

  # Container Registry 上で docker image を登録
  - name: 'gcr.io/cloud-builders/docker'
    id: docker push
    args: ['push', 'gcr.io/${PROJECT_ID}/${_IMAGE_NAME}:${COMMIT_SHA}']

  # GCE インスタンス作成
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: make gce instance
    entrypoint: gcloud
    args: [
      'compute', 'instances', 'create', '${_INSTANCE_NAME}', 
      '--project', '${PROJECT_ID}', 
      '--image-family', 'centos-7', 
      '--zone', '${_REGION}'
    ]

  # GCE インスタンス上で docker コンテナ起動

# ビルド完了後の docker image を Container Registry に保管
images: ['gcr.io/${PROJECT_ID}/${_IMAGE_NAME}:${COMMIT_SHA}']
